user nginx; # Der nginx Nutzer ist für den Nginx Prozess verantwortlich
worker_processes 2;
error_log /etc/nginx/logs/error.log; # Speicherort für Fehler Logging

events {
  worker_connections 256;
}

http {
    map $http_cookie $access {
        default 'deny';
        "~*api_access_key=ZLKcksbX5IlxrtPxFDzoexbUbaMaTc6hiGXPDL96RCZmwx1KiHiiPvr25dizfNkX" allow;
    }

    server {
        listen 443 ssl; # Server erwartet Traffic auf Port 443
        server_name dascr.local;
        ssl_certificate /etc/nginx/certs/cloudflare.pem; # Speicherort des Public Certificates
        ssl_certificate_key /etc/nginx/certs/cloudflare.key; # Speicherort des Private Certificates
        add_header Strict-Transport-Security "max-age=21600; includeSubDomains; preload"; # Lässt nur HTTPS Verbindungen zu und begrenzt Sitzungen auf 6 Stunden
        server_tokens off; # Schaltet Server Tokens aus
        ssl_protocols TLSv1.3; # Erlaubt nur die aktuellste TLS Version
        access_log /etc/nginx/logs/access.log; # Speicherort für Access Logging
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # IP Forwarding erlauben

        location / {
            proxy_pass http://127.0.0.1:80; # Weiterleiten an das Web-Frontend
        }
    }

    server {
        listen 443 ssl; # Server erwartet Traffic auf Port 443
        server_name api.dascr.local;
        ssl_certificate /etc/nginx/certs/cloudflare.pem; # Speicherort des Public Certificates
        ssl_certificate_key /etc/nginx/certs/cloudflare.key; # Speicherort des Private Certificates
        add_header Strict-Transport-Security "max-age=1800; includeSubDomains; preload"; # Lässt nur HTTPS Verbindungen zu und begrenzt Sitzungen auf 30 Minuten
        server_tokens off; # Schaltet Server Tokens aus
        ssl_protocols TLSv1.3; # Erlaubt nur die aktuellste TLS Version
        access_log /etc/nginx/logs/api.log; # Speicherort für API Logging
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # IP Forwarding erlauben

        if ($access = deny) {
            return 403;
        }

        location / {
            proxy_pass http://127.0.0.1:8000; # Weiterleiten an das API Backend
        }
    }
}
